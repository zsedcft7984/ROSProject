우선 라인트레이싱을 하기 위한 코드는 
Jetbot에서 제공하는 Line_color.py를 기반으로 해서 제작하였음
기본 구성은
1. 카메라 2. 모터 제어 3. 라인트레이싱() 4. 부저
로 이루어져 있음

<카메라>
Jetbotmini 차량 보드에 부착된 카메라를 사용
카메라를 가져오는 코드는 
gstreamer_pipeline 을 통해 가져오고 
라인트레이싱에서
    capture = cv.VideoCapture(gstreamer_pipeline(flip_method=0), cv.CAP_GSTREAMER)
을 통해서 사용함
제어할 요소는 
화면의 프레임, fps(rate) 등을 조절하여 원하는 성능을 얻어야함
프레임은 낮을수록 좋고 fps는 높을수록 성능이 좋으나 장치에 부담이됨

<모터제어>
모터제어의 경우 라인트레이싱에서 자동으로 이루어지는것과 
수동으로 제어하도록 하는 것으로 생각함
따라서 수동과 자동을 나눌수 있는 코드를 지정해서 두 상태를 전환하는 방식을 사용할 계획

수동 제어코드는 따로 새로는 서비스를 제작해서 구현

<라인트레이싱>
카메라와 모터제어의 기능을 사용하여 동작
카메라에서 가져온 이미지를 분석하여 목표로한 색상의 정도에 따라 다른 모터 동작을 하도록함
우선 버튼의 클릭으로 라인트레이싱하는것을 키고 끌수 있도록 설정해둠

<부져>
외부에서 특정 신호를 주면 울리도록 설정할 계획

+ 이코드에 영상송출하는 기능은 넣지못함
이유는 : 많은시간 투자해서 py3에 영상을 송출하는 방식을 구현하려 했으나 같은코드에 사용하기위헤선
cv.bridge()를 사용해야 하는데 py3에서는 지원을 하지않음 따라서 해결하려 했으나 장치에서 오류가 발생해
해당 방식은 제한됨 따라서 아래와 같은 방식으로 시도해볼 예정
1. py3(라인트레이싱 및 topic) + py2(단순 영상송출) 로 2가지 파일로 나누어 동작
카메라 2대 사용 필수

2. py3에서 py2코드를 불러와 해당 기능을 사용하도록 동작